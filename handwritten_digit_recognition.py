# -*- coding: utf-8 -*-
"""Handwritten_Digit_Recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1coLG1kHb03HG_X221LvE0odEuc8RjjBl

Handwritten Digit Recognition

Importing the libraries
"""

import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
import keras
import random

"""Data Preprocessing"""

from keras.datasets import mnist

# Loading Dataset
(X_train, y_train), (X_test, y_test) = mnist.load_data()

X_train = X_train.reshape(X_train.shape[0], 28, 28, 1)

X_test = X_test.reshape(X_test.shape[0], 28, 28, 1)

# Feature Scaling
X_train = X_train/255

X_test = X_test/255

# Encoding Categorical Data
from sklearn.preprocessing import OneHotEncoder

encoder = OneHotEncoder()

y_train = y_train.reshape(-1,1)
y_test = y_test.reshape(-1,1)

encoder.fit(y_train)

y_train = encoder.transform(y_train).toarray()
y_test = encoder.transform(y_test).toarray()

"""Building the CNN"""

# Initializing CNN
cnn = tf.keras.models.Sequential()

# Adding first convolution layer
cnn.add(tf.keras.layers.Conv2D(filters=50, kernel_size=5, activation='relu', input_shape=[28, 28, 1]))
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))

# Adding Second convolution layer
cnn.add(tf.keras.layers.Conv2D(filters=100, kernel_size=5, activation='relu'))
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))

# Adding flattened layer of all features
cnn.add(tf.keras.layers.Flatten())

# Adding Fully connected layer
cnn.add(tf.keras.layers.Dense(units=256, activation='relu'))

# Adding output layer
cnn.add(tf.keras.layers.Dense(units=10, activation='softmax'))

"""Training the CNN"""

# Compiling the model 
cnn.compile(optimizer ='adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])

# Training the model
cnn.fit(X_train, y_train, batch_size = 64, epochs = 25, verbose=1,validation_data = (X_test, y_test))

"""Computing Confusion Matrix"""

from sklearn.metrics import multilabel_confusion_matrix, accuracy_score
y_pred = cnn.predict(X_test)
for i in range(y_pred.shape[0]):
  curr_max = 0
  category = -1
  for j in range(10):
    if y_pred[i][j] > curr_max:
      curr_max = y_pred[i][j]
      category = j
  for j in range(10):
    if j == category:
      y_pred[i][j] = 1
    else:
      y_pred[i][j] = 0

from sklearn.metrics import multilabel_confusion_matrix, accuracy_score

print('Confusion matrix :\n',multilabel_confusion_matrix(y_test, y_pred))
print('Test accuracy :',accuracy_score(y_test, y_pred))

"""Visualizing random result from TestSet"""

def visualize_random_test():
  index = random.randrange(X_test.shape[0])
  print('image number :',index)
  imgplot = plt.imshow(X_test[index].reshape(28,28))
  print('Actual Result    : ',y_test[index])
  print('Predicted Result : ',y_pred[index])

visualize_random_test()

visualize_random_test()

visualize_random_test()

"""Predictions from images other than Dataset"""

from keras.preprocessing import image
def visualize_other_test(test_image):
  test_image = image.img_to_array(test_image)
  test_image = test_image/256
  test_image = 1 - test_image
  result = cnn.predict(test_image.reshape(1,28,28,1))[0]

  curr_max = 0
  category = -1
  for j in range(10):
    if result[j] > curr_max:
      curr_max = result[j]
      category = j
  for j in range(10):
    if j == category:
      result[j] = 1
    else:
      result[j] = 0

  print('Prediction : ',result)
  imgplot = plt.imshow(test_image.reshape(28,28))

test_image = image.load_img('/content/2.png', color_mode="grayscale", target_size = (28, 28))
 visualize_other_test(test_image)

test_image = image.load_img('/content/5.png', color_mode="grayscale", target_size = (28, 28))
visualize_other_test(test_image)

test_image = image.load_img('/content/9.png', color_mode="grayscale", target_size = (28, 28))
visualize_other_test(test_image)

"""Saving Model Data"""

cnn.save('Handwritten_Digit_Recognition.h5')
print("Saving the model as Handwritten_Digit_Recognition.h5")